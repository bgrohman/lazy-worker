{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Lazy-worker","body":"#lazy-worker#\r\n\r\nLazy web workers only work when someone is watching - in the UI thread!\r\n\r\n##Why?##\r\nIE<10 doesn't support [web workers](https://developer.mozilla.org/en-US/docs/DOM/Using_web_workers). By using a lazy-worker, you can code to the web workers spec even on IE. \r\n\r\n##Can I use this?##\r\nSince lazy-worker only overwrites the global `Worker` object if it doesn't already exist, lazy-worker can be used both in browsers that have native web worker support and those that don't. The global `Worker` object can be manually overridden by calling `lazyWorker.exportWorker()`. Alternatively, the `lazyWorker.Worker` constructor can be used directly to create lazy workers.\r\n\r\n###Browser Support###\r\n* Chrome 21+\r\n* Firefox 14+\r\n* Safari 5+\r\n* Opera 12+\r\n* Internet Explorer 9+ \r\n\r\n### Running the Unit Tests ###\r\nThe test.html file needs to be hosted by a server and not open from the local file system. If you have ruby, run `ruby -r webrick -e \"s = WEBrick::HTTPServer.new(:Port => 9090, :DocumentRoot => Dir.pwd); trap('INT') { s.shutdown }; s.start\"` in the top level directory and open [http://localhost:9090/test/test.html](http://localhost:9090/test/test.html).\r\n\r\nAlternatively, the tests can be run using the [grunt build tool](https://github.com/cowboy/grunt) command `grunt qunit`.\r\n\r\n##Current Web Worker Functionality##\r\n* Creating workers\r\n * Both the `Worker` constructor and any lazy-worker instances will have a `lazy` property set to `true`\r\n* Sending messages\r\n * Only the `onmessage` function is supported. lazy-worker might support the `addEventListener` method in the future.\r\n* Loading scripts within workers using the `importScripts` function\r\n* Error handling within workers using the `onerror` function\r\n* Nested workers\r\n\r\n### Example ###\r\n```javascript\r\n// In main.js\r\nWorker.lazy; // true\r\nvar worker = new Worker('my-worker.js');\r\nworker.lazy; // true\r\n\r\nworker.onmessage = function(msg) {\r\n  console.log(msg.data.foo);\r\n};\r\n\r\nworker.onerror = function(err) {\r\n  console.log('Error: ', err.type, err.message);\r\n};\r\n\r\nworker.postMessage({\r\n  foo: 'foo'\r\n});\r\n```\r\n\r\n```javascript\r\n// In my-worker.js\r\nself.importScripts('my-helper-script.js');\r\n\r\nself.onmessage = function(msg) {\r\n  var foo = msg.data.foo + 'bar';\r\n  \r\n  self.postMessage({\r\n    foo: foo\r\n  });\r\n};\r\n```","google":"","tagline":"Lazy web workers only work when someone is watching - in the UI thread!"}