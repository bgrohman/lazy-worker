/*! lazy-worker - v0.1.1 - 2012-09-05
* https://github.com/bgrohman/lazy-worker
* Copyright (c) 2012 Bryan Grohman; Licensed MIT */
(function(globals){function Worker(scriptUrl){function ErrorEvent(e){this.type=e,this.bubbles=!1,this.cancelBubble=!1,this.cancelable=!1,this.defaultPrevented=!1,this.eventPhase=0,this.filename="",this.lineno=0,this.returnValue=!0,this.timestamp=(new Date).getTime()}function handleError(e){var t;typeof wrapper.onerror=="function"&&(t=new ErrorEvent("error"),t.message=e,wrapper.onerror(t))}function init(){fetchScript(scriptUrl,function(e){evalWorkerScript(e.responseText)})}function fetchScript(e,t){var n=new XMLHttpRequest;n.open("GET",e,!1),n.onload=function(){t(n)},n.send()}function evalWorkerScript(src){var importScripts=self.importScripts;try{eval(src)}catch(ex){handleError("Error in worker script: "+ex.message)}}function buildWrapper(){return{constructor:Worker,lazy:!0,terminate:function(){},onmessage:function(){},onerror:function(){},postMessage:function(e){if(typeof self.onmessage=="function")try{self.onmessage({data:e})}catch(t){handleError("Error in worker onmessage: "+t.message)}}}}var self=this,wrapper;return self.lazy=!0,self.postMessage=function(e){if(typeof wrapper.onmessage=="function")try{wrapper.onmessage({data:e})}catch(t){handleError("Error on onmessage handler: "+t.message)}},self.importScripts=function(script){function handleRequest(request){var scriptSource=request.responseText;try{eval(scriptSource)}catch(ex){handleError("Error in worker importScripts: "+ex.message)}}var scripts,i,len;arguments.length>1?scripts=arguments:scripts=[script];for(i=0,len=scripts.length;i<len;i++)fetchScript(scripts[i],handleRequest)},wrapper=buildWrapper(),init(),wrapper}function exportWorker(){globals.Worker=Worker}Worker.lazy=!0,globals.Worker||exportWorker(),globals.lazyWorker={exportWorker:exportWorker,Worker:Worker}})(window);